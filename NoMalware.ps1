Function Verificar-Administrador {
    if (-not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
        Write-Host "Permissão de administrador necessária. Reexecutando o script com privilégios elevados..." -ForegroundColor Yellow
        Start-Process -FilePath "powershell.exe" -ArgumentList "-NoProfile -ExecutionPolicy Bypass -File `"$PSCommandPath`"" -Verb RunAs
        Exit
    }
}

Verificar-Administrador

Start-Transcript -Path "$env:TEMP\script-log.txt" -Append
Write-Host "Iniciando o script..." -ForegroundColor Green

$ErrorActionPreference = "Stop"

Function Verificar-Instalacao {
    param(
        [string]$nomeAplicativo,
        [string]$caminhoInstalacao
    )
    
    Write-Host "Verificando instalação de: $nomeAplicativo..." -ForegroundColor Cyan
    if (Test-Path $caminhoInstalacao) {
        Write-Host "$nomeAplicativo está instalado." -ForegroundColor Cyan
        return $true
    } else {
        Write-Host "$nomeAplicativo não está instalado." -ForegroundColor Yellow
        return $false
    }
}

Function Copiar-Dados {
    param(
        [string]$origem,
        [string]$destino
    )

    Write-Host "Iniciando a cópia de dados..." -ForegroundColor Cyan
    if (Test-Path $origem) {
        if (-not (Test-Path $destino)) {
            Write-Host "Criando pasta de destino: $destino" -ForegroundColor Green
            New-Item -Path $destino -ItemType Directory -Force
        }

        try {
            Copy-Item -Path "$origem\*" -Destination $destino -Recurse -Force
            Write-Host "Dados copiados com sucesso!" -ForegroundColor Green
        } catch {
            Write-Host "Erro ao copiar dados: $_" -ForegroundColor Red
        }
    } else {
        Write-Host "A pasta de origem não foi encontrada." -ForegroundColor Yellow
    }
}

Function Obter-DiretorioNavegator {
    param(
        [string]$diretorioEscolhido
    )

    $pastaNavegator = Join-Path -Path $diretorioEscolhido -ChildPath "navegator"

    if (-not (Test-Path $diretorioEscolhido)) {
        Write-Host "Diretório não encontrado. Criando..." -ForegroundColor Yellow
        New-Item -Path $diretorioEscolhido -ItemType Directory -Force
    }

    Start-Sleep -Seconds 1

    if (Test-Path $pastaNavegator) {
        Write-Host "Pasta 'navegator' já existe em: $pastaNavegator" -ForegroundColor Yellow
        $resposta = Read-Host "Deseja usar a pasta existente? Digite 'S' para Sim ou 'N' para criar uma nova"

        if ($resposta -ieq "S") {
            Write-Host "Usando a pasta existente." -ForegroundColor Green
        } else {
            Write-Host "Digite um novo caminho para criar a pasta 'navegator'." -ForegroundColor Cyan
            $diretorioEscolhido = Read-Host "Digite o novo caminho completo"
            $pastaNavegator = Join-Path -Path $diretorioEscolhido -ChildPath "navegator"
        }
    }

    if (-not (Test-Path $pastaNavegator)) {
        New-Item -Path $pastaNavegator -ItemType Directory -Force
        Write-Host "A pasta 'navegator' foi criada em: $pastaNavegator" -ForegroundColor Green
    }

    return $pastaNavegator
}

Function Configurar-NavegadorOuApp {
    param(
        [string]$nomeAplicativo,
        [string]$caminhoInstalacao,
        [string]$subPasta,
        [string]$regKeyPath,
        [string]$pastaAntiga
    )

    if (Verificar-Instalacao -nomeAplicativo $nomeAplicativo -caminhoInstalacao $caminhoInstalacao) {
        $subPastaAplicativo = Join-Path -Path $pastaNavegator -ChildPath $subPasta
        if (-not (Test-Path $subPastaAplicativo)) {
            New-Item -Path $subPastaAplicativo -ItemType Directory -Force
            Write-Host "Subpasta '$subPasta' criada em: $subPastaAplicativo" -ForegroundColor Green
        }

        Copiar-Dados -origem $pastaAntiga -destino $subPastaAplicativo

        if (-not (Test-Path $regKeyPath)) {
            Write-Host "Criando chave de registro: $regKeyPath" -ForegroundColor Yellow
            New-Item -Path $regKeyPath -Force
        }

        Set-ItemProperty -Path $regKeyPath -Name "UserDataDir" -Value $subPastaAplicativo
        Set-ItemProperty -Path $regKeyPath -Name "ForceUserDataDir" -Value 1
        Write-Host "$nomeAplicativo configurado para usar a pasta: $subPastaAplicativo" -ForegroundColor Green
    }
}

$diretorioEscolhido = Read-Host "Digite o caminho completo onde deseja criar a pasta 'navegator' (exemplo: C:\Testes\)"
$pastaNavegator = Obter-DiretorioNavegator -diretorioEscolhido $diretorioEscolhido


$opcoes = @(
    @{Nome = "Edge"; CaminhoInstalacao = "C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe"; SubPasta = "Edge"; RegKeyPath = "HKLM:\SOFTWARE\Policies\Microsoft\Edge"; PastaAntiga = "$env:LOCALAPPDATA\Microsoft\Edge\User Data"},
    @{Nome = "Chrome"; CaminhoInstalacao = "C:\Program Files\Google\Chrome\Application\chrome.exe"; SubPasta = "Chrome"; RegKeyPath = "HKLM:\SOFTWARE\Policies\Google\Chrome"; PastaAntiga = "$env:LOCALAPPDATA\Google\Chrome\User Data"}
)

$escolha = Read-Host "Escolha o número correspondente ao aplicativo ou navegador"

if ($escolha -ge 1 -and $escolha -le $opcoes.Length) {
    $aplicativoEscolhido = $opcoes[$escolha - 1]
    Configurar-NavegadorOuApp -nomeAplicativo $aplicativoEscolhido.Nome -caminhoInstalacao $aplicativoEscolhido.CaminhoInstalacao -subPasta $aplicativoEscolhido.SubPasta -regKeyPath $aplicativoEscolhido.RegKeyPath -pastaAntiga $aplicativoEscolhido.PastaAntiga
} else {
    Write-Host "Opção inválida. O script será encerrado." -ForegroundColor Red
}

Write-Host "Processo concluído! Pressione qualquer tecla para sair." -ForegroundColor Green
[System.Console]::ReadKey($true) | Out-Null
Stop-Transcript
